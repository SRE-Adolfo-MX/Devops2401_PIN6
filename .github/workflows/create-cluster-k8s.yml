name: Deploy EKS Cluster and Install Monitoring

on:
  workflow_run:
    workflows: ["Apply Terraform to AWS"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Configure AWS CLI
      run: |
        # Configurar AWS CLI con las credenciales
        aws configure set aws_access_key_id ${{ secrets.AWS_KEY }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
        aws configure set region us-east-1

    - name: Get EC2 Public IP
      id: get_ec2_ip
      run: |
        EC2_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=ubuntu_server_terraform" \
          --query 'Reservations[*].Instances[*].PublicIpAddress' \
          --output text)
        echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV  # Almacenar IP en variable de entorno

    - name: Connect to EC2 and set up EKS
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@$EC2_IP << 'EOF'
        # Configurar AWS CLI en la instancia EC2
        echo "Configuring AWS CLI..."
        export AWS_ACCESS_KEY_ID="${{ secrets.AWS_KEY }}"
        export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_KEY }}"
        export AWS_REGION="us-east-1"

        # Instalar eksctl
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.137.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin

        # Crear un clúster EKS
        eksctl create cluster --name eks-mundos-e --region us-east-1 --node-type t3.small --nodes 3 --with-oidc --managed --full-ecr-access --zones us-east-1a,us-east-1b,us-east-1c
        
        # Esperar hasta que el clúster esté disponible
        echo "Waiting for the cluster to be created..."
        MAX_RETRIES=30
        for i in $(seq 1 $MAX_RETRIES); do
          STATUS=$(aws eks describe-cluster --name eks-mundos-e --query 'cluster.status' --output text --region us-east-1)
          echo "Cluster status: $STATUS"
          if [ "$STATUS" == "ACTIVE" ]; then
            echo "Cluster is ACTIVE"
            break
          fi
          echo "Cluster is not ready yet. Waiting..."
          sleep 30
        done
        
        # Verifica si el clúster está activo
        if [ "$STATUS" != "ACTIVE" ]; then
          echo "Cluster did not become active in time. Exiting."
          exit 1
        fi

        # Agregar el complemento CSI EBS
        eksctl create addon --name aws-ebs-csi-driver --cluster eks-mundos-e --region us-east-1

        # Configurar el archivo kubeconfig
        aws eks update-kubeconfig --name eks-mundos-e --region us-east-1

        # Añadir los repositorios de Helm para Prometheus y Grafana
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update

        # Instalar Prometheus
        helm install prometheus prometheus-community/prometheus --namespace prometheus --create-namespace --set alertmanager.persistentVolume.storageClass="gp2" --set server.persistentVolume.storageClass="gp2"

        # Instalar Grafana
        helm install grafana grafana/grafana --namespace grafana --create-namespace --set persistence.storageClassName="gp2" --set persistence.enabled=true --set adminPassword='EKS!sAWSome' --set service.type=LoadBalancer
       
        # Configurar Prometheus como fuente de datos en Grafana
        kubectl apply -f - << 'YAML'
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: grafana-datasource
          namespace: grafana
          labels:
            grafana_datasource: "1"  # Sidecar label to detect datasource
        datasources:
          datasource.yaml:
            apiVersion: 1
            datasources:
            - name: Prometheus
              type: prometheus
              access: proxy
              url: http://prometheus-server.prometheus.svc.cluster.local
              isDefault: true
        YAML
        EOF

    - name: Finish
      run: echo "EKS Cluster created and Prometheus/Grafana installed"
